import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes
// ignore_for_file: unnecessary_brace_in_string_interps

//WARNING: This file is automatically generated. DO NOT EDIT, all your changes would be lost.

class I18n implements WidgetsLocalizations {
  const I18n();

  static const GeneratedLocalizationsDelegate delegate =
    const GeneratedLocalizationsDelegate();

  static I18n of(BuildContext context) =>
    Localizations.of<I18n>(context, WidgetsLocalizations);

  @override
  TextDirection get textDirection => TextDirection.ltr;

  String get cash_records => "充提记录";
  String get transaction_records => "交易记录";
  String get logout => "退出登录";
  String get my_asset => "我的资产";
  String get withdraw => "提现";
  String get buy_up => "买涨";
  String get buy_down => "买跌";
  String get top_up => "充值";
  String get amend => "修改";
  String get close_out => "平仓";
  String get order_empty => "暂无持仓";
  String get my_orders_stock => "我的持仓";
  String get next_round_start => "下轮开始";
  String get round_end => "结束下注";
  String get future_profit => "当前预计收益";
  String get take_profit => "止盈";
  String get cut_loss => "止损";
  String get act_level => "实际杠杆";
  String get invest => "投资";
  String get force_expiration => "自动平仓时间";
  String get per_price => "当前每份价格";
  String get rest_amount => "剩余份数";
  String get invest_amount => "投资份数";
  String get gain => "收益";
  String get loss => "亏损";
  String get contain_fee => "包含手续费";
  String get balance => "余额";
  String get log_in => "登录";
  String get account_name => "账户名";
  String get account_name_hint => "请输入账户名";
  String get password => "密码";
  String get password_hint => "请输入密码";
  String get password_confirm => "确认密码";
  String get password_confirm_hint => "请再次确认密码";
  String get pin_code => "验证码";
  String get pin_code_hint => "请输入验证码";
  String get get_pin_code => "获取验证码";
  String get register => "注册";
  String get create_new_account => "创建新账户";
  String get already_register => "已注册，请登录";
  String get dialog_cancel_button => "取消";
  String get dialog_sell_title => "平仓";
  String get dialog_sell_content => "当前平仓预计收益:";
  String get dialog_log_out_title => "登出";
  String get dialog_log_out_content => "确定你已妥善保存了你的密码,并确定希望登出你的账户。";
  String get dialog_log_out_confirm_button => "确认登出";
}

class _I18n_en_US extends I18n {
  const _I18n_en_US();

  @override
  TextDirection get textDirection => TextDirection.ltr;
}

class _I18n_zh_CN extends I18n {
  const _I18n_zh_CN();

  @override
  String get cash_records => "充提记录";
  @override
  String get transaction_records => "交易记录";
  @override
  String get logout => "退出登录";
  @override
  String get my_asset => "我的资产";
  @override
  String get withdraw => "提现";
  @override
  String get buy_up => "买涨";
  @override
  String get buy_down => "买跌";
  @override
  String get top_up => "充值";
  @override
  String get amend => "修改";
  @override
  String get close_out => "平仓";
  @override
  String get order_empty => "暂无持仓";
  @override
  String get my_orders_stock => "我的持仓";
  @override
  String get next_round_start => "下轮开始";
  @override
  String get round_end => "结束下注";
  @override
  String get future_profit => "当前预计收益";
  @override
  String get take_profit => "止盈";
  @override
  String get cut_loss => "止损";
  @override
  String get act_level => "实际杠杆";
  @override
  String get invest => "投资";
  @override
  String get force_expiration => "自动平仓时间";
  @override
  String get per_price => "当前每份价格";
  @override
  String get rest_amount => "剩余份数";
  @override
  String get invest_amount => "投资份数";
  @override
  String get gain => "收益";
  @override
  String get loss => "亏损";
  @override
  String get contain_fee => "包含手续费";
  @override
  String get balance => "余额";
  @override
  String get log_in => "登录";
  @override
  String get account_name => "账户名";
  @override
  String get account_name_hint => "请输入账户名";
  @override
  String get password => "密码";
  @override
  String get password_hint => "请输入密码";
  @override
  String get password_confirm => "确认密码";
  @override
  String get password_confirm_hint => "请再次确认密码";
  @override
  String get pin_code => "验证码";
  @override
  String get pin_code_hint => "请输入验证码";
  @override
  String get get_pin_code => "获取验证码";
  @override
  String get register => "注册";
  @override
  String get create_new_account => "创建新账户";
  @override
  String get already_register => "已注册，请登录";
  @override
  String get dialog_cancel_button => "取消";
  @override
  String get dialog_sell_title => "平仓";
  @override
  String get dialog_sell_content => "当前平仓预计收益:";
  @override
  String get dialog_log_out_title => "登出";
  @override
  String get dialog_log_out_content => "确定你已妥善保存了你的密码,并确定希望登出你的账户。";
  @override
  String get dialog_log_out_confirm_button => "确认登出";

  @override
  TextDirection get textDirection => TextDirection.ltr;
}

class GeneratedLocalizationsDelegate extends LocalizationsDelegate<WidgetsLocalizations> {
  const GeneratedLocalizationsDelegate();

  List<Locale> get supportedLocales {
    return const <Locale>[
      const Locale("en", "US"),
      const Locale("zh", "CN")
    ];
  }

  LocaleResolutionCallback resolution({Locale fallback}) {
    return (Locale locale, Iterable<Locale> supported) {
      if (this.isSupported(locale)) {
        return locale;
      }
      final Locale fallbackLocale = fallback ?? supported.first;
      return fallbackLocale;
    };
  }

  @override
  Future<WidgetsLocalizations> load(Locale locale) {
    final String lang = locale != null ? locale.toString() : "";
    final String languageCode = locale != null ? locale.languageCode : "";
    if ("en_US" == lang) {
      return new SynchronousFuture<WidgetsLocalizations>(const _I18n_en_US());
    }
    else if ("zh_CN" == lang) {
      return new SynchronousFuture<WidgetsLocalizations>(const _I18n_zh_CN());
    }
    else if ("en" == languageCode) {
      return new SynchronousFuture<WidgetsLocalizations>(const _I18n_en_US());
    }
    else if ("zh" == languageCode) {
      return new SynchronousFuture<WidgetsLocalizations>(const _I18n_zh_CN());
    }

    return new SynchronousFuture<WidgetsLocalizations>(const I18n());
  }

  @override
  bool isSupported(Locale locale) {
    for (var i = 0; i < supportedLocales.length && locale != null; i++) {
      final l = supportedLocales[i];
      if (l.languageCode == locale.languageCode) {
        return true;
      }
    }
    return false;
  }

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => false;
}