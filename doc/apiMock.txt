1. NxOrder message sent from front end to nx server

{
	"transactionType": "NxOrder",
	"buyOrderTxId": "b0d5b79dc535a56fdf1fad8d7dff095fbba7e7d7",  
	"buyOrder": {
		"refBlockNum": 10200,   // In uat, get this from: https://nxapitest.cybex.io/v1/refData
		"refBlockPrefix": 70891072,   // In uat, get this from https://nxapitest.cybex.io/v1/refData
		"txExpiration": 1558084682,   //5 mins from now
		"fee": {
			"assetId": "1.3.0",       //CYB
			"amount": 55          
		},
		"seller": "1.2.27",           //User's account id
		"amountToSell": {
			"assetId": "1.3.87",      //NXC.USDT
			"amount": 16000000
		},
		"minToReceive": {
			"assetId": "1.3.35",     //NXC.NBTCAA (Contract's assetName)
			"amount": 10             // Number of contract
		},
		"expiration": 1558084682,    //5 mins from now
		"fill_or_kill": 1,           // Hardcoded to 1
		"signature": "1f6e84bdc28bf8734372eec4cd45af7a180df69a99eda910339ee355bde0fd8fe92a4285b6ac4cd9cb9106ee4b4f9e999f3a236a8b3da7e28748689e72b926dfc2"
	},		
	"commission": {
		"refBlockNum": 10200,
		"refBlockPrefix": 70891072,
		"txExpiration": 1558084682,         //5 mins from now
		"fee": {
			"assetId": "1.3.0",            //CYB
			"amount": 1058                 //Amount to be determined
		},
		"from": "1.2.27",                  //User's account id
		"to": "1.2.29",                    // NX market maker
		"amount": {                        
			"assetId": "1.3.87",          //NXC.USDT
			"amount": 160000
		},
		"signature": "207f437c9174ba2b8fcc662a764e44773844a20ac231401c3b14fd27ab14994c1d705dad78d0c17a5939e4a5cf1c7e19289ff0f883828ad21fc6e5498cc009926e",
		"txId": "6339366563373738393235386366393338663630"
	},
	"contractId": "NBTC6400X061300",      //contractId from https://nxapitest.cybex.io/v1/refData 
	"underlyingSpotPx": "8000",           // Underlying price when the client places the order
	"sellOrder": {
		"refBlockNum": 10200,		
		"refBlockPrefix": 70891072,
		"txExpiration": 1558084682,      // One year from now
		"fee": {
			"assetId": "1.3.0",          //CYB
			"amount": 55
		},
		"seller": "1.2.27",              // User's account id
		"amountToSell": {
			"assetId": "1.3.35",         //NXC.NBTCAA (Contract's assetName)
			"amount": 10
		},
		"minToReceive": {
			"assetId": "1.3.87",         //NXC.USDT
			"amount": 1
		},
		"expiration": 1558084682,       //Contract's tradingStopTime + 1 min
		"fill_or_kill": 1,              //Hardcoded to 1
		"signature": "1f524b7bc3a9bb069bbc87be7c17cc5039117cd3283a949bbe94dff80eda0c859d6db21efb0de3ede57a6b12df1c7582fbf446b5ce05efcd72a4b6f6a6610a6ccf"
	},
	"sellOrderTxId": "3431383431636362663665313265613937363434",
	"cutLossPx": "6600",               // Underlying price when cut-loss is triggered. Use 0 to indicate "not set"
	"takeProfitPx": "9000",            // Underlying price when take-profit is triggered. Use 0 to indicate "not set"
	"expiration": 1558224000           // Time to expirate the order. Use 0 to indicate "not set"
}


2. NxAmend: Change condition
The new sellOrder, cutLoss, takeProfit and forceExpiration will replace the previous one.

{
	"transactionType": "NxAmend",
	"refBuyOrderTxId": "b0d5b79dc535a56fdf1fad8d7dff095fbba7e7d7",   // Referenced buyOrderTxId
	"cutLossPx": "8300",                // Underlying price when cut-loss is triggered. Use 0 to indicate "not set"
	"takeProfitPx": "8000",             // Underlying price when take-profit is triggered. Use 0 to indicate "not set"
	"execNowPx": "8200",                // Reference underlying price when selling immediately. Use 0 to indicate "not set".
	"expiration": 1546300800,	        // Expiration time in epoch. Use 0 to indicate "not set".
	"seller": "1.2.27",
	"signature": "2003ff455c6543d03c4d567999dc58e69a6f02346e122b2246aff66b27f3ca72ca1f72e239311a55ea1c81583b1ae59592167542ad5ea5fe02605e818c96830132"
	//Signature is calculated based on cutLoss, takeProfit, execNow, forceExpiration, refBuyOrderTxId and seller
	// Following code is used to sign in C++:
	        fc::optional<fc::ecc::private_key> privkey = wif_to_key(private_key_str);

            fc::sha256 obj(refBuyOrderTxId);
            obj = obj.hash(cutLossPx);
            obj = obj.hash(take_profit_px);
            obj = obj.hash(exec_now_px);
            obj = obj.hash(expiration);
            obj = obj.hash(seller);

            digest_type::encoder enc;
            fc::raw::pack( enc, obj);
            signature = (*privkey).sign_compact(enc.result());
}



3. Successful ack message from nx server to front end
{
  "Status": "Successful",
  "txId": "b0d5b79dc535a56fdf1fad8d7dff095fbba7e7d7",
  "time": "2019-03-26T08:46:22.639016Z"
}

4. Failure ack message from nx server to front end
{
  "Status": "Failed",
  "reason": "INSUFFICIENT_FUNDING",
  "details": "Insufficient balance. Requested: 16160000 Available:0",
  "txId": "b0d5b79dc535a56fdf1fad8d7dff095fbba7e7d7",
  "time": "2019-05-16T15:18:50.681475Z"
}




